var documenterSearchIndex = {"docs":
[{"location":"#Backtest-Documentation","page":"Backtest Documentation","title":"Backtest Documentation","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"CurrentModule = Backtest","category":"page"},{"location":"#Intent","page":"Backtest Documentation","title":"Intent","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"Backtest.jl exists in order to provide a straightforward interface for performing backtests in Julia. Moreover, I (Max Holloway) really like some of the ideas from the python framework Backtrader, and I wanted to make my own (better, simpler) version of it in Julia.","category":"page"},{"location":"#Core-Ideas","page":"Backtest Documentation","title":"Core Ideas","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"In order to get up and running, one only needs to know how to make a DataReader and how to fill in StrategyOptions. After that, you can run your backtest! To add to the backtest, you will need to provide what are called \"user-defined functions\". These functions allow one to perform behavior, such as ordering shares or calculating metrics derived from FieldOperations.","category":"page"},{"location":"#Functions","page":"Backtest Documentation","title":"Functions","text":"","category":"section"},{"location":"#Super-Important-Functions","page":"Backtest Documentation","title":"Super Important Functions","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"run\nStrategyOptions()\norder!","category":"page"},{"location":"#Backtest.run","page":"Backtest Documentation","title":"Backtest.run","text":"run(stratoptions::StrategyOptions)::Strategy\n\nRun a backtest and obtain the completed strategy object.\n\nArguments\n\nstratoptions::StrategyOptions: all of the options to be used for the backtest\n\nReturns\n\nStrategy: a completed Strategy object\n\n\n\n\n\n","category":"function"},{"location":"#Backtest.StrategyOptions-Tuple{}","page":"Backtest Documentation","title":"Backtest.StrategyOptions","text":"StrategyOptions(; kwargs...)::StrategyOptions\n\nKeyword Arguments\n\nRequired\n\ndatareaders::Dict{AssetId, <:AbstractDataReader}: data source for each asset\nfieldoperations::Vector{<:AbstractFieldOperation}: field operations to be performed\nstart::{<:Dates.TimeType}: start time for the backtest (this is the DateTime of the first bar of data to be read; actions start one bar later)\nendtime::{<:Dates.TimeType}: end time for the backtest\n\nOptional\n\nnumlookbackbars::Integer: number of backtest bars to store; if -1, then all data is stored; if space is an issue, this can be changed to a positive #. However, this will limit how much data can be accessed.\ntradinginterval::{<:Dates.TimePeriod}: how much time there is between the start of a bar\nverbosity:Type: how much verbosity the backtest should have; INFO gives the most messages, and NOVERBOSITY gives the fewest\ndatadelay::{<:Dates.Period}: how much time transpires at the beginning of a bar before data is received; e.g. if this is 5 seconds, then data will be received by the backtest 5 seconds after the bar starts.\nmessagelatency::{<:Dates.Period}: how much time it takes to transmit a message to a brokerage/exchange\nfieldoptimeout::{<:Dates.Period}: how much time until the field operation computatio times out; note that field operations are computed before the user receives data\ndatetimecol::String: name of datetime column\nopencol::String: name of open column\nhighcol::String: name of high column\nlowcol::String: name of low column\nclosecol::String: name of close column\nvolumecol::String: name of volume column\nondataevent::Function: user-defined function that performs logic when data is received\nonorderevent::Function: user-defined function that performs logic when an order event is received\nprincipal::{<:Dates.Period}: starting amount of buying power; in many cases this will be interpreted as a starting cash value\n\n\n\n\n\n","category":"method"},{"location":"#Backtest.order!","page":"Backtest Documentation","title":"Backtest.order!","text":"order!(strat::Strategy, order::OT)::OrderId where {OT<:Orders.AbstractOrder}\n\nPlace an order and obtain its orderid.\n\nArguments\n\nstrat::Strategy: the strategy object running that invokes this method\norder::{<:Orders.AbstractOrder}:\n\nReturns\n\nOrderId: identifier for the placed order.\n\n\n\n\n\n","category":"function"},{"location":"#Accessor-Functions","page":"Backtest Documentation","title":"Accessor Functions","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"numbarsavailable\ndata","category":"page"},{"location":"#Backtest.Engine.numbarsavailable","page":"Backtest Documentation","title":"Backtest.Engine.numbarsavailable","text":"numbarsavailable(strat::Strategy)::Integer\n\nArguments\n\nstrat::Strategy: the strategy object running that invokes this method\n\nReturns\n\nInteger: the number of bars available from which we can retrieve data.\n\n\n\n\n\n","category":"function"},{"location":"#Backtest.Engine.data","page":"Backtest Documentation","title":"Backtest.Engine.data","text":"data(strat::Strategy, ago::Integer)::NamedArray\n\nArguments\n\nstrat::Strategy: the strategy object running when this method is invoked\nago::Integer: the number of bars before the previous bar; if ago = 0, this accesses   the previous bar's data\n\nReturns\n\nNamedArray: [assetid, fieldid]->value pairs for ago bars ago.\n\n\n\n\n\ndata(strat::Strategy, ago::Integer, fieldid::FieldId)::NamedArray\n\nArguments\n\nstrat::Strategy: the strategy object running when this method is invoked\nago::Integer: the number of bars before the previous bar; if ago = 0, this accesses   the previous bar's data\nfieldid::FieldId: Note: FieldId is an alias for String\n\nReturns\n\nNamedArray: [fieldid]->value pairs for ago bars ago.\n\n\n\n\n\ndata(strat::Strategy, ago::Integer, assetid::AssetId, fieldid::FieldId)\n\nArguments\n\nstrat::Strategy: the strategy object running when this method is invoked\nago::Integer: the number of bars before the previous bar; if ago = 0, this accesses   the previous bar's data\nassetid::AssetId: Note: AssetId is an alias for String\nfieldid::FieldId: Note: FieldId is an alias for String\n\nReturns\n\n{<:Any}: Object associated ago bars ago with this assetid and fieldid\n\n\n\n\n\ndata(strat::Strategy)::NamedArray\n\nArguments\n\nstrat::Strategy: the strategy object running when this method is invoked\n\nReturns\n\nNamedArray: [assetid, fieldid]->value pairs for the previous bar\n\n\n\n\n\ndata(strat::Strategy, fieldid::FieldId)::NamedArray\n\nArguments\n\nstrat::Strategy: the strategy object running when this method is invoked\nfieldid::FieldId: Note: FieldId is an alias for String\n\nReturns:\n\nNamedArray: assetid->value pairs for the previous bar.\n\n\n\n\n\ndata(strat::Strategy, assetid::AssetId, fieldid::FieldId)\n\nArguments\n\nstrat::Strategy: the strategy object running when this method is invoked\nassetid::AssetId: Note: AssetId is an alias for String\nfieldid::FieldId: Note: FieldId is an alias for String\n\nReturns\n\n{<:Any}: The object associated with assetid and fieldid for the previous bar.\n\n\n\n\n\n","category":"function"},{"location":"#Other-Functions","page":"Backtest Documentation","title":"Other Functions","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"log","category":"page"},{"location":"#Backtest.log","page":"Backtest Documentation","title":"Backtest.log","text":"log(strat::Strategy, message::String, verbosity::Type)\n\nWrite message to the console.\n\nArguments\n\nstrat::Strategy: the strategy object running that invokes this method\nmessage::String: message to be written to console\nverbosity::Type: the verbosity level to be used; see Verbosity Levels\n\n\n\n\n\n","category":"function"},{"location":"#Types","page":"Backtest Documentation","title":"Types","text":"","category":"section"},{"location":"#High-Level-Types","page":"Backtest Documentation","title":"High-Level Types","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"The following are types that all users must understand when running a backtest.","category":"page"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"StrategyOptions\nPortfolio","category":"page"},{"location":"#Backtest.StrategyOptions","page":"Backtest Documentation","title":"Backtest.StrategyOptions","text":"Options for running a backtest.\n\n\n\n\n\n","category":"type"},{"location":"#Backtest.Portfolio","page":"Backtest Documentation","title":"Backtest.Portfolio","text":"Information about the portfolio.\n\n\n\n\n\n","category":"type"},{"location":"#Verbosity-Types","page":"Backtest Documentation","title":"Verbosity Types","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"These types allow users to specify how much verbosity they want in their backtests. They are ordered here from most to least verbose.","category":"page"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"AbstractVerbosity\nINFO\nTRANSACTIONS\nWARNING\nNOVERBOSITY","category":"page"},{"location":"#Backtest.AbstractVerbosity","page":"Backtest Documentation","title":"Backtest.AbstractVerbosity","text":"Top of the verbosity type hierarchy. In practice, this is not intended to be a user-facing type, however it can be used if a user wants to log every possible message in the backtest.\n\n\n\n\n\n","category":"type"},{"location":"#Backtest.INFO","page":"Backtest Documentation","title":"Backtest.INFO","text":"Log all messages at the INFO level or below. This is a lot of verbosity. Supertype: AbstractVerbosity\n\n\n\n\n\n","category":"type"},{"location":"#Backtest.TRANSACTIONS","page":"Backtest Documentation","title":"Backtest.TRANSACTIONS","text":"Log all messages related to transactions, and all messages at a lower level. Supertype: INFO\n\n\n\n\n\n","category":"type"},{"location":"#Backtest.WARNING","page":"Backtest Documentation","title":"Backtest.WARNING","text":"Log all messages that give warnings or important information. This is very low verbosity. Supertype: TRANSACTIONS\n\n\n\n\n\n","category":"type"},{"location":"#Backtest.NOVERBOSITY","page":"Backtest Documentation","title":"Backtest.NOVERBOSITY","text":"Log no messages at all. Supertype: WARNING\n\n\n\n\n\n","category":"type"},{"location":"#Low-Level-Types","page":"Backtest Documentation","title":"Low-Level Types","text":"","category":"section"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"The following are types that users should never have to access directly.","category":"page"},{"location":"","page":"Backtest Documentation","title":"Backtest Documentation","text":"Strategy","category":"page"},{"location":"#Backtest.Strategy","page":"Backtest Documentation","title":"Backtest.Strategy","text":"Container for all backtest run-time state. Strategy objects should not be modified within user-provided functions.\n\n\n\n\n\n","category":"type"}]
}
